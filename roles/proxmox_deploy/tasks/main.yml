    - name: Set up authorized keys for the {{ devUser }} user
      authorized_key:
        user: "{{ ansible_user }}" 
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}" 

    - name: Cloning virtual machine from "{{ VM_template }}" with name "{{ VM_name }}"
      proxmox_kvm:
#           verify_ssl: false
           api_user : "{{ api_user }}"
           api_password: "{{ PV_password }}" 
           api_host : "{{ default_proxmox_node }}"
           name : "{{ VM_name }}"
           node : "{{ default_proxmox_node }}"
           clone: "{{ VM_template }}"
           timeout: 300
      tags: provission
    - name: Increasing disk if it is necessary
      shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm resize $A {{ default_disk }} +{{ VM_INCREASE_DISK }}G
      when: '"{{ VM_INCREASE_DISK }}" != "0"'
      tags: provission

    - name: Waiting to apply cloud init changes in disk
      wait_for:
        host: "{{ VM_name }}"
        timeout: 5
      tags: provission

    - name: starting new Virtual Machine to change IPv4 configuration, it is necessary
      proxmox_kvm:
          # verify_ssl: false
           api_user : "{{ api_user }}"
           api_password: "{{ PV_password }}" 
           api_host : "{{ default_proxmox_node }}"
           name : "{{ VM_name }}"
           node : "{{ default_proxmox_node }}"
           state : started
           timeout: 300
      when: '"{{ VM_INCREASE_DISK }}" != "0"' 
      register: wait
      tags: provission

    - name: Waiting to start virtual server machine completely
      wait_for: 
        host: "{{ VM_name }}"
        timeout: 45
      when: wait.changed == true
      tags: provission

    - name: stopping new Virtual Machine to change IPv4 configuration, it is necessary
      shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm stop $A
      when: '"{{ VM_network }}" != "my_network" or "{{ VM_INCREASE_DISK }}" != "0"'
      tags: provission

    - name: debug
      debug:
        msg: "{{ vars[VM_network] }}"

    - name: Loading set up for Virtual Machine. Assigning correct bridge in network interface
      shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A --net0 'virtio,bridge=vmbr{{ item.value.vmbr }}'
      when: '"{{ VM_network }}" != "my_network"'
      with_dict: "{{ vars[VM_network] }}"
      tags: provission


    - name: Loading set up for Virtual Machine. Assigning IP, sockets, cores and memory for Virtual Machine
      shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A --ipconfig0 'ip={{ VM_IP }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' --nameserver '{{ item.value.dnsservers }}' --searchdomain '{{ item.value.searchdomain }}' --memory '{{ VM_memory }}' --sockets '{{ VM_sockets }}' --cores '{{ VM_cores }}'
      when: '"{{ VM_IP }}" != "automatic"'
      with_dict: "{{ vars[VM_network] }}"
      tags: provission 

    - name: Loading set up for Virtual Machine. Assigning IP automatically, sockets, cores and memory for Virtual Machine
      shell: A=$(qm list |grep "{{ VM_name }}" | awk '{print $1}'); qm set $A --ipconfig0 'ip={{ VM_IP }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' --nameserver '{{ item.value.dnsservers }}' --searchdomain '{{ item.value.searchdomain }}' --memory '{{ VM_memory }}' --sockets '{{ VM_sockets }}' --cores '{{ VM_cores }}'
      when: '"{{ VM_IP }}" == "automatic"'
      with_dict: "{{ vars[VM_network] }}"
      tags: provission

    - name: starting new Virtual Machine in current proxmox node
      proxmox_kvm: 
           # verify_ssl: false
            api_user : "{{ api_user }}"
            api_password: "{{ PV_password }}"
            api_host : "{{ default_proxmox_node }}"
            name : "{{ VM_name }}"
            node : "{{ default_proxmox_node }}"
            state : started
            timeout: 300
      when: '"{{ PV_node2 }}" == "none"'
      tags: provission

    - name: starting new Virtual Machine in correct proxmox node
      proxmox_kvm:
               # verify_ssl: false
                api_user : "{{ api_user }}"
                api_password: "{{ PV_password }}"
                api_host : "{{ default_proxmox_node }}"
                name : "{{ VM_name }}"
                node : "{{ PV_node2 }}"
                state : started
                timeout: 300
      delegate_to: "{{ PV_node2 }}"
      when: '"{{ PV_node2 }}" != "none"'
      tags: provission
